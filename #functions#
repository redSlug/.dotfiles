function gcam(){
     # Assumes the branch name has the Jira ticket
         commit_message=$1
         JIRA_TICKET="$(git rev-parse --abbrev-ref HEAD | egrep -o '[A-Z]{2,5}\-[0-9]{1,5}')"
         git commit -am "$commit_message ($JIRA_TICKET)"
}
function gcmjira(){
     # Assumes the branch name has the Jira ticket
         commit_message=$1
         JIRA_TICKET="$(git rev-parse --abbrev-ref HEAD | egrep -o '[A-Z]{2,5}\-[0-9]{1,5}')"
         git commit -m  "$commit_message ($JIRA_TICKET)"
}
function gcam_duo(){
         # Assumes the branch name has the Jira ticket
         commit_message=$1
         JIRA_TICKET="$(git rev-parse --abbrev-ref HEAD | egrep -o '[A-Z]{2,5}\-[0-9]{1,5}')"
         git duet-commit -am "$commit_message ($JIRA_TICKET)"
}
function gcm_duo(){
         # Assumes the branch name has the Jira ticket
         commit_message=$1
         JIRA_TICKET="$(git rev-parse --abbrev-ref HEAD | egrep -o '[A-Z]{2,5}\-[0-9]{1,5}')"
         git duet-commit -m "$commit_message ($JIRA_TICKET)"
}
function gcamecho(){
         commit_message=$1
         JIRA_TICKET="$(git rev-parse --abbrev-ref HEAD | egrep -o '[A-Z]{2,5}\-[0-9]{1,5}')"
         echo "$commit_message ($JIRA_TICKET)"
}
### for bash shell, it's /bin/bash not /bin/zsh
function _okta_aws_shell() {
    aws-okta exec -a 10h -t 10h "${1:-peloeng}" -- /bin/zsh
}
alias oawsh="_okta_aws_shell"
function _okta_aws() {
  aws-okta exec -a 10h -t 10h peloeng -- aws "$@"
}
alias oaws="_okta_aws"
dlint(){
    docker-compose exec api bash -c ./scripts/lint.sh
}
mochi_build(){
      aws-okta exec peloeng -- docker-compose build
}
mochi_up(){
      aws-okta exec peloeng -- docker-compose up
}
mochi_lint(){
	q    docker-compose exec api bash -c "scripts/lint.sh && cat pylint_output.txt"
}
mochi_build_up() {
         aws-okta exec peloeng -- docker-compose build
         aws-okta exec peloeng -- docker-compose up
}
mochi_shell() {
          aws-okta exec peloeng -- docker-compose exec api bash -c "ipython"
}
mochi_load_int_enum(){
    aws-okta exec peloeng -- docker-compose exec api bash -c "scripts/manage.py int_enum_loader"
}
mochi_bash(){
    aws-okta exec peloeng -- docker-compose exec api bash
}
function fix_vpn {
      sudo ifconfig en0 down
       sudo route flush
        sudo ifconfig en0 up
}
function cat_functions_alias {
      cat ~/dotfiles/functions
       cat ~/dotfiles/aliases
        it2attention fireworks
}
function clear_checksums {
       cd /api/db/ecommerce/schema/change-logs
        liquibase --logLevel=info --defaultsFile=/ecommerce.properties --changeLogFile=changelog-master.json clearCheckSums
         dc build liquibase
          migrate_down
}
function get_password {
      boom
       cat ~/dotfiles/secrets | grep password
}
function drun_script {
    boom
    echo docker-compose exec api bash -c "$1"
    docker-compose exec api bash -c "$1"
}
function dpytest {
     docker-compose exec api bash -c "pytest $1"
}
function dtests {
    boom
    docker-compose exec api bash -c "./scripts/run_tests.sh -t $1"
}
function dfeature_tests {
    docker-compose exec api bash -c "./scripts/run_featuretests.py -f $1"
}
function reconcile_queues {
      echo "making sure queues exist"
       docker-compose exec api bash -c scripts/deploy/reconcile_queues.py
}
function start_queues {
    #docker-compose exec api bash -c "mq/scripts/start_ecomm.sh local"
    docker-compose exec api bash -c "mq/scripts/start.sh local ecomm_scheduler"
}
function fix_pycharm_helpers {
      boom
       docker ps -a | grep -i pycharm | awk '{print $1}' | xargs docker rm
}
function fix_pycharm {
      docker rm -f $(docker ps -a | grep pycharm_helper | awk '{print $1};')
      docker-compose down
      echo "Pycharm->File->Invalidate Caches / Restart (choose to invalidate and restart)"
}
function fix_queues {
      boom
      reconcile_queues
      start_queues
}
function dnosetest {
    boom
    docker-compose exec api bash -c "nosetests -Pvs $1"
}
function fix_camera {
    echo "Fixing camera"
    echo "sudo killall VDCAssistant"
    sudo killall VDCAssistant
    echo "done"
}
function stash_and_clean {
    git clean -f
    git stash
}
function fix_memcached {
      echo "running flush_all. try brining things up and down too..."
       echo 'flush_all' | netcat localhost 11211
}
function dcmagic {
      docker-compose exec magichat psql -U peloton
}
function dcecommerce {
     docker-compose exec ecommerce psql -U peloton
}
function delete_all_branches {
    boom
    git for-each-ref --format '%(refname:short)' refs/heads | grep -v master | xargs git branch -D
}
function boom {
    source ~/dotfiles/functions
    it2attention fireworks
}
# SSH
function all_instances() {
  aws ec2 describe-instances --filter "Name=tag:chef-environment,Values=$1" "Name=tag:chef-role,Values=$2" | grep InstanceId | cut -f4 -d'"'
}
function find_instance() {
  all_instances $1 $2 | shuf -n 1
}
function aws_ssh() {
  aws ssm start-session --target "$1"
}
function send_cmd() {
  OUTPUT=$(aws ssm send-command --targets "Key=tag:chef-environment,Values=$1" "Key=tag:chef-role,Values=$2" --document-name "AWS-RunShellScript" --parameters "commands=$3" --output-s3-bucket-name peloton-sm-sm-logs --output-s3-key-prefix runcommand)
  COMMAND_ID=$(echo $OUTPUT | grep CommandId | cut -d'"' -f6)
  echo "Wait here and refresh for results: https://s3.console.aws.amazon.com/s3/buckets/peloton-sm-sm-logs/runcommand/$COMMAND_ID/?region=us-east-1&tab=overview"
}
function send_cmd_env() {
  OUTPUT=$(aws ssm send-command --targets "Key=tag:chef-environment,Values=$1" --document-name "AWS-RunShellScript" --parameters "commands=$2" --output-s3-bucket-name peloton-sm-sm-logs --output-s3-key-prefix runcommand)
  COMMAND_ID=$(echo $OUTPUT | grep CommandId | cut -d'"' -f6)
  echo "Wait here and refresh for results: https://s3.console.aws.amazon.com/s3/buckets/peloton-sm-sm-logs/runcommand/$COMMAND_ID/?region=us-east-1&tab=overview"
}
function send_cmd_ids() {
  OUTPUT=$(aws ssm send-command --instance-ids "$1" --document-name "AWS-RunShellScript" --parameters "commands=$2" --output-s3-bucket-name peloton-sm-sm-logs --output-s3-key-prefix runcommand)
  COMMAND_ID=$(echo $OUTPUT | grep CommandId | cut -d'"' -f6)
  echo "Wait here and refresh for results: https://s3.console.aws.amazon.com/s3/buckets/peloton-sm-sm-logs/runcommand/$COMMAND_ID/?region=us-east-1&tab=overview"
}
